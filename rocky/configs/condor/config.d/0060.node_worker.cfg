### Worker Setup
### --------------------
### To be used on nodes that allow job execution

DAEMON_LIST     = $(DAEMON_LIST), \
                  StartD

### Memory reservation for system in MiB
MEMORY = $(DETECTED_MEMORY)
RESERVED_MEMORY = (2 * 1024)

### Matchmaking advertisment
STARTD_ATTRS = \
    $(STARTD_ATTRS) \
    PerCoreMemory PerCoreMemoryMax \
    JobWtimeShort JobWtimeMedium JobWtimeLong \
    MinJobStartInterval \
    CloudSite \
    ProvidesCpu ProvidesIO \
    Walltime

### Publish job attributes as slot attributes when running a job
STARTD.STARTD_JOB_ATTRS = \
    $(STARTD_JOB_ATTRS) \
    MemoryUsage RemoteUserCPU RemoteSysCPU

### Define default Walltime (4 days)
STARTD.Walltime                 = 345600
### Policy macros
STARTD.JobQueuedTime            = ( CurrentTime - TARGET.QDate )
# minimum time between starting jobs
STARTD.MinJobStartInterval      = 30
# Set Memory
STARTD.MEMORY                   = $(DETECTED_MEMORY) 
## Walltime limits
STARTD.JobWtimeShort            = 10 * $(MINUTE)
STARTD.JobWtimeLong             = 7 * $(DAY)
# Define (initial) matchmaking attributes
STARTD.ProvidesCpu              = FALSE
STARTD.ProvidesIO               = FALSE
JOB_RENICE_INCREMENT            = 2

### Machine "ownership"
# Usage by an interactive user
# Shared resources by default use
# IS_OWNER = (START =?= FALSE)
# Dedicated resources shouldn't be "owned"
IS_OWNER = FALSE


### Job Management
### --------------------
## when to start jobs
# 1. Upper limit on number of jobs which should be started in a short time:
#    Not more than 1 job per core per 30 seconds
START  = \
    ifThenElse( RecentJobStarts > 0, \
        ( $(NUM_CPUS) * ( 20 * $(MINUTE)) / RecentJobStarts ) > $(MinJobStartInterval), \
        TRUE \
    ) 

# Factor to allow longer runtime on slower machines
RuntimeMultiplier = 1

# Max time to run a job befor vacating
STARTD.MaxJobRetirementTime = ifThenElse( TARGET.RequestWalltime =?= Undefined ,\
                                1*$(DAY) ,\
                                TARGET.RequestWalltime * 1.5*  $(RuntimeMultiplier))


## Preempt jobs which reach more than their requested walltime
PREEMPT         =  ifThenElse( (TARGET.RequestWalltime =!= UNDEFINED), \
                        (MyCurrentTime - TARGET.JobCurrentStartDate) >  TARGET.RequestWalltime * 2 * $(RuntimeMultiplier), \
                        (MyCurrentTime - TARGET.JobCurrentStartDate) > 1*$(DAY) )
## Suspend only long-running jobs
SUSPEND         = FALSE
CONTINUE        = FALSE
KILL            = ifThenElse( (TARGET.RequestWalltime =!= UNDEFINED), \
                        (MyCurrentTime - TARGET.JobCurrentStartDate) >  TARGET.RequestWalltime * 2.1 * $(RuntimeMultiplier), \
                        (MyCurrentTime - TARGET.JobCurrentStartDate) > 1.1*$(DAY) )
KILLING_TIMEOUT = 5*$(MINUTE)
WANT_SUSPEND    = FALSE
WANT_VACATE     = TRUE

